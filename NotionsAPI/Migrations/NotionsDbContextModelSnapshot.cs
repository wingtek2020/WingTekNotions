// <auto-generated />
using System;
using CNotionAPI.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CNotionAPI.Migrations
{
    [DbContext(typeof(NotionsDbContext))]
    partial class NotionsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CNotionAPI.Entities.Needles.Needle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetricSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UsSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Needles");
                });

            modelBuilder.Entity("CNotionAPI.Entities.Needles.NeedleSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsHook")
                        .HasColumnType("bit");

                    b.Property<double>("Metric")
                        .HasColumnType("float");

                    b.Property<string>("Us")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NeedleSizes");
                });

            modelBuilder.Entity("CNotionAPI.Entities.Needles.NeedleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("MetricName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NeedleSizeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NeedleSizeId");

                    b.ToTable("NeedleTypes");
                });

            modelBuilder.Entity("CNotionAPI.Entities.Patterns.PatternNeedleSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatternId")
                        .HasColumnType("int");

                    b.Property<double>("SizeMetric")
                        .HasColumnType("float");

                    b.Property<string>("UsSize")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatternId");

                    b.ToTable("PatternNeedleSize");
                });

            modelBuilder.Entity("CNotionAPI.Patterns.Pattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DifficultyAverage")
                        .HasColumnType("float");

                    b.Property<int?>("DifficultyCount")
                        .HasColumnType("int");

                    b.Property<bool>("Downloadable")
                        .HasColumnType("bit");

                    b.Property<bool>("Free")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Gauge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PdfUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("RatingAverage")
                        .HasColumnType("float");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int");

                    b.Property<decimal?>("RowGauge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Yardage")
                        .HasColumnType("int");

                    b.Property<string>("YarnWeightDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Patterns");
                });

            modelBuilder.Entity("CNotionAPI.Yarn.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutMeHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("FaveColors")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FaveCurse")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LargePhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileCountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("SmallPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TinyPhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CNotionAPI.Entities.Needles.Needle", b =>
                {
                    b.HasOne("CNotionAPI.Yarn.User", null)
                        .WithMany("Needles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CNotionAPI.Entities.Needles.NeedleType", b =>
                {
                    b.HasOne("CNotionAPI.Entities.Needles.NeedleSize", "NeedleSize")
                        .WithMany("NeedleTypes")
                        .HasForeignKey("NeedleSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NeedleSize");
                });

            modelBuilder.Entity("CNotionAPI.Entities.Patterns.PatternNeedleSize", b =>
                {
                    b.HasOne("CNotionAPI.Patterns.Pattern", "Pattern")
                        .WithMany("NeedleSizes")
                        .HasForeignKey("PatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pattern");
                });

            modelBuilder.Entity("CNotionAPI.Patterns.Pattern", b =>
                {
                    b.HasOne("CNotionAPI.Yarn.User", "Author")
                        .WithMany("AuthoredPatterns")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CNotionAPI.Entities.Needles.NeedleSize", b =>
                {
                    b.Navigation("NeedleTypes");
                });

            modelBuilder.Entity("CNotionAPI.Patterns.Pattern", b =>
                {
                    b.Navigation("NeedleSizes");
                });

            modelBuilder.Entity("CNotionAPI.Yarn.User", b =>
                {
                    b.Navigation("AuthoredPatterns");

                    b.Navigation("Needles");
                });
#pragma warning restore 612, 618
        }
    }
}
